syntax = "proto3";
import "AM_GaiaController.proto";

option java_package = "gaiaframework.gaiaprotos";
option java_outer_classname = "GaiaMessageProtos";

//service GAIA {
//    rpc controlFlow(stream FlowUpdate) returns (stream StatusUpdate) {}
//}
//
//service PAReport {
//    rpc getFlowRules(PAM_REQ) returns (stream PAMessage) {}
//}

// service for controlling SAs
service SendingAgentService {
    //    rpc StartFlow (FlowUpdate) returns (stream StatusReport) {}
    rpc PrepareConnections (PAM_REQ) returns (stream PAMessage) {}
    rpc ChangeFlow (stream FlowUpdate) returns (FUM_ACK) {}
    rpc ControlExperiment (Exp_CTRL) returns (Exp_CTRL_ACK) {}
    rpc FetchSmallFlow (SmallFlow) returns (SmallFlow_ACK) {}
    rpc SetRecFlowInfoList (FlowGroupInfoBundle) returns (ACK) {}
    rpc FinishFile (FileFinishMsg) returns (ACK) {}
    //    rpc GetShuffleSize(ShuffleInfoReq) returns (ShuffleFiles) {}
}

//service ForwardingAgentService {
//    rpc SetFlowInfoList (FlowGroupInfoMsg) returns (GeneralACK) {}
//    rpc FinishFile (FileFinishMsg) returns (FlowStatus_ACK) {}
//}

// service for reporting to Master
service MasterService {
    rpc UpdateFlowStatus (stream FlowStatusReport) returns (FlowStatus_ACK) {}
    rpc UpdatePathStatus (PathStatusReport) returns (PathStatus_ACK) {}
    // Borrow FlowStatusReport Msg here.
    rpc FinishFGFile (FlowStatusReport) returns (ACK) {}
//    rpc FinishFile (FileFinishMsg) returns (FlowStatus_ACK) {}
    //    rpc StreamUpdatePathStatus (stream PathStatusReport) returns (PathStatus_ACK) {}
}

message FlowStatusReport {
    message FlowStatus {
        string id = 1;
        double transmitted = 2;
        bool finished = 3;
    }

    repeated FlowStatus status = 1;
}

message PathStatusReport {
    //    message PathStatus {
    string saID = 1;
    string raID = 2;
    int32 pathID = 3;
    bool isBroken = 4;
    //    }

    //    repeated PathStatus pathStatus = 1;
}

// message from Master to agents to change flow rate etc.
// rates are grouped by [raID][flowID][pathID]
message FlowUpdate {

    message PathRateEntry {
        int32 pathID = 1;
        double rate = 2;
    }

    message FlowUpdateEntry {
        double remainingVolume = 1;
        string flowID = 2;
        enum Operation {
            START = 0;
            CHANGE = 1;
            PAUSE = 2;
        }
        Operation op = 3;
        // path to rate mapping
        repeated PathRateEntry pathToRate = 4;
        //        map <int32, double> pathToRate = 3;
        //        string filename = 5;

        repeated ShuffleInfo.FlowInfo flowInfos = 5;
//        repeated string srcIP = 6;
//        repeated string dstIP = 7;
    }

    message RAUpdateEntry {
        string raID = 1;
        repeated FlowUpdateEntry fges = 2;
    }

    repeated RAUpdateEntry RAUpdate = 1;
    // Collectors.groupingBy() should enforce that multiple RAUEntry all have different raID
}

// Msg to change the rate of a FlowGroup
message FlowGroupRate {

    enum Operation {
        START = 0;
        CHANGE = 1;
        PAUSE = 2;
    }
    Operation op = 1;


    repeated FlowGroupInfoMsg sendingFGIs = 5; // this is optional

}

message SmallFlow {
    string srcIP = 1;
    string filename = 2;
}

message PAMessage {
    string sa_id = 1;
    string ra_id = 2;
    int32 path_id = 3;
    int32 port_no = 4;
}

message FlowGroupInfoMsg {
    string fgID = 1;
    string srcLoc = 2;
    string dstLoc = 3;
    repeated ShuffleInfo.FlowInfo flowInfos = 4;
}

message FlowGroupInfoBundle {
    repeated FlowGroupInfoMsg fgimsg = 1;
}

message PAM_REQ {
    //    bool finished = 1;
}

message FUM_ACK {}

message FlowStatus_ACK {}

message PathStatus_ACK {}

message ACK {}

message Exp_CTRL {
    enum CTRL_Operation {
        START = 0;
        STOP = 1;
    }

    CTRL_Operation op = 1;
    string ExpName = 2;
}

message Exp_CTRL_ACK {}

message SmallFlow_ACK {}

message FileFinishMsg {
    string filename = 1;
}

/*message ShuffleInfoReq{

    message ReducerInfo {
        string reducerID = 1;
        string reducerIP = 2;
    }

    string jobID = 1;
    string username = 2;

    repeated ReducerInfo reducers = 3;
}

message ShuffleFiles{}*/

